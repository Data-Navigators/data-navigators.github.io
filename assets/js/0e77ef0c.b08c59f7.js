"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[1790],{5680:(e,a,t)=>{t.d(a,{xA:()=>p,yg:()=>c});var n=t(6540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},y=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),y=r,c=u["".concat(s,".").concat(y)]||u[y]||m[y]||i;return t?n.createElement(c,l(l({ref:a},p),{},{components:t})):n.createElement(c,l({ref:a},p))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=y;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},577:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=t(8168),r=(t(6540),t(5680));const i={sidebar_position:1},l="SQL: A Quick Review",o={unversionedId:"data-transformation/SQL/sql-quick-review",id:"data-transformation/SQL/sql-quick-review",title:"SQL: A Quick Review",description:"SQL is a programming language used to manage and manipulate relational databases. It is used to create, read, update, and delete data in a database. SQL is widely used in data analysis, business intelligence, and web development. Its syntax is simple and easy to understand, making it a popular choice for data professionals.",source:"@site/docs/data-transformation/SQL/sql-quick-review.mdx",sourceDirName:"data-transformation/SQL",slug:"/data-transformation/SQL/sql-quick-review",permalink:"/docs/data-transformation/SQL/sql-quick-review",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-transformation/SQL/sql-quick-review.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Hypothesis-Testing",permalink:"/docs/Statistical-Concepts/Hypothesis-Testing /Hypothesis-Testing"},next:{title:"Advanced SQL: Window and Aggregate Functions",permalink:"/docs/data-transformation/SQL/advance-sql"}},s={},d=[{value:"SQL Nutshell \ud83c\udf0f",id:"sql-nutshell-",level:2},{value:"Creating Tables",id:"creating-tables",level:3},{value:"Creating Views",id:"creating-views",level:3},{value:"Reserved &amp; Limited Keywords",id:"reserved--limited-keywords",level:2},{value:"Join types",id:"join-types",level:2},{value:"INNER JOIN",id:"inner-join",level:3},{value:"LEFT \u201cOUTER\u201d JOIN",id:"left-outer-join",level:3},{value:"RIGHT \u201cOUTER\u201d JOIN",id:"right-outer-join",level:3},{value:"LEFT ANTI SEMI JOIN and LEFT OUTER JOIN (with exclusion)",id:"left-anti-semi-join-and-left-outer-join-with-exclusion",level:3},{value:"CROSS JOIN",id:"cross-join",level:3},{value:"Overview",id:"overview",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Key Points",id:"key-points",level:2},{value:"Extracting Year from a Date String in SQL",id:"extracting-year-from-a-date-string-in-sql",level:2},{value:"Function Explanation",id:"function-explanation",level:3},{value:"SQL Query Example",id:"sql-query-example",level:3},{value:"Expected Output",id:"expected-output",level:3}],p={toc:d},u="wrapper";function m(e){let{components:a,...i}=e;return(0,r.yg)(u,(0,n.A)({},p,i,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"sql-a-quick-review"},"SQL: A Quick Review"),(0,r.yg)("h1",{id:"basic-sql"},"Basic SQL"),(0,r.yg)("p",null,"SQL is a programming language used to manage and manipulate relational databases. It is used to create, read, update, and delete data in a database. SQL is widely used in data analysis, business intelligence, and web development. Its syntax is simple and easy to understand, making it a popular choice for data professionals."),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("p",null,(0,r.yg)("img",{alt:"sql-joins.png",src:t(3072).A,width:"1440",height:"836"}))),(0,r.yg)("h2",{id:"sql-nutshell-"},"SQL Nutshell \ud83c\udf0f"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"sql-joins.png",src:t(9635).A,width:"800",height:"1000"})),(0,r.yg)("h3",{id:"creating-tables"},"Creating Tables"),(0,r.yg)("p",null,"To create a table in Snowflake, use the following syntax:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table_name (\n  column1 data_type,\n  column2 data_type,\n  ...\n);\n")),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE customers (\n  customer_id INT,\n  customer_name VARCHAR,\n  email VARCHAR,\n  phone_number VARCHAR\n);\n\nCREATE TABLE orders (\n  order_id INT,\n  customer_id INT,\n  order_date DATE,\n  total_amount DECIMAL(10, 2)\n);\n")),(0,r.yg)("h3",{id:"creating-views"},"Creating Views"),(0,r.yg)("p",null,"To create a view in Snowflake, use the following syntax:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE VIEW view_name AS\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n")),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE VIEW order_details AS\nSELECT o.order_id,\n       o.order_date,\n       c.customer_name,\n       c.email\nFROM orders AS o\nINNER JOIN customers AS c\n   ON o.customer_id = c.customer_id;\n")),(0,r.yg)("p",null,"Note: Replace ",(0,r.yg)("inlineCode",{parentName:"p"},"table_name"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"view_name"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"column1"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"column2"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"condition")," with the appropriate names and conditions for your use case."),(0,r.yg)("h2",{id:"reserved--limited-keywords"},"Reserved & Limited Keywords"),(0,r.yg)("p",null,"Snowflake SQL reserves all ANSI keywords (with the exception of type keywords such as CHAR, DATE, DECIMAL, etc.), as well as some additional keywords (ASC, DESC, MINUS, etc.) that are reserved by other popular databases. Additionally, Snowflake reserves keywords REGEXP and RLIKE (which function like the ANSI reserved keyword LIKE) and SOME (which is a synonym for the ANSI reserved keyword ANY)."),(0,r.yg)("p",null,"To avoid parsing ambiguities, Snowflake SQL also prohibits the use of keywords such as LEFT, OUTER, JOIN, etc. as table names or aliases in the FROM list, and the use of keywords such as TRUE, FALSE, CASE, etc. as column references in scalar expressions."),(0,r.yg)("p",null,"eg. ACCOUNT,BETWEEN,SAMPLE,TABLE,WHENEVER "),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://docs.snowflake.com/en/sql-reference/reserved-keywords"},"Referrence Link")),(0,r.yg)("h2",{id:"join-types"},"Join types"),(0,r.yg)("p",null,"Data cleansing and enrichment processes need to combine, filter, aggregate, and select different sets to answer questions we have. That translates into knowing how to perform different types of JOINs and WHERE clauses to simple SELECT statements. First and foremost, we need to get up to speed with JOINs."),(0,r.yg)("p",null,"Let\u2019s imagine for a minute that we have customers and orders tables, which are related by the ",(0,r.yg)("inlineCode",{parentName:"p"},"customers_id")," field:"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("p",null,(0,r.yg)("img",{alt:"sql-joins.png",src:t(3240).A,width:"512",height:"362"}))),(0,r.yg)("h3",{id:"inner-join"},"INNER JOIN"),(0,r.yg)("p",null,"You want all orders but also want to know the name of the customer who ordered."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT a.order_id\n     , a.customer_id\n     , b.customer_name\nFROM example.orders AS a\nINNER JOIN example.customers AS b\n   ON a.customer_id = b.customer_id;\n")),(0,r.yg)("h3",{id:"left-outer-join"},"LEFT \u201cOUTER\u201d JOIN"),(0,r.yg)("p",null,"In this case, you want all orders, even if they have a customer associated or not (let\u2019s not dig into data integrity issues here for the sake of simplicity of this example)."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT o.order_id\n     , o.customer_id\n     , c.customer_name\nFROM example.orders AS o\nLEFT [OUTER] JOIN example.customers AS c\n   ON o.customer_id = c.customer_id;\n")),(0,r.yg)("p",null,"Some database engines do not require you to specify ",(0,r.yg)("inlineCode",{parentName:"p"},"OUTER"),"."),(0,r.yg)("h3",{id:"right-outer-join"},"RIGHT \u201cOUTER\u201d JOIN"),(0,r.yg)("p",null,"All customers with or without any orders."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT o.order_id\n     , o.customer_id\n     , c.customer_name\nFROM example.orders AS o\nRIGHT [OUTER] JOIN example.customers AS c\n   ON o.customer_id = c.customer_id;\n")),(0,r.yg)("p",null,"Order is important for LEFT and RIGHT join. This query will bring us all ",(0,r.yg)("inlineCode",{parentName:"p"},"example.customers")," rows and whatever matches with ",(0,r.yg)("inlineCode",{parentName:"p"},"example.orders"),"."),(0,r.yg)("h3",{id:"left-anti-semi-join-and-left-outer-join-with-exclusion"},"LEFT ANTI SEMI JOIN and LEFT OUTER JOIN (with exclusion)"),(0,r.yg)("p",null,"Let\u2019s say you want all customers who haven\u2019t ordered anything yet."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT c.customer_id\n     , c.customer_name\nFROM example.customers AS c\nWHERE NOT EXISTS (SELECT o.customer_id\n                  FROM example.orders AS o\n                  WHERE c.customer_id=o.customer_id);\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT c.customer_id\n     , c.customer_name\nFROM example.customers AS c\nLEFT [OUTER] JOIN example.orders AS o\n   ON c.customer_id = o.customer_id\nWHERE o.customer_id IS NULL;\n")),(0,r.yg)("p",null,"Always do performance tests on your queries and subqueries. Join performance depends on table structure, indexes, and generated query plans."),(0,r.yg)("h3",{id:"cross-join"},"CROSS JOIN"),(0,r.yg)("p",null,"Cross join returns the Cartesian product of both tables, meaning it will bring all possible combinations between all the elements of both sets."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT c.customer_id\n    , c.customer_name\n    , o.order_id\nFROM example.orders AS o\nCROSS JOIN example.customers AS c;\n")),(0,r.yg)("p",null,"There are other ways to combine datasets, but both query parts need to have the same structure:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"UNION"),(0,r.yg)("li",{parentName:"ul"},"UNION ALL"),(0,r.yg)("li",{parentName:"ul"},"EXCEPT"),(0,r.yg)("li",{parentName:"ul"},"INTERSECT")),(0,r.yg)("h1",{id:"datatype-cast-in-sql"},"Datatype Cast in SQL"),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"Datatype casting in SQL is used to convert values from one data type to another. It's essential for handling data stored in various formats."),(0,r.yg)("h2",{id:"syntax"},"Syntax"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"CAST()")," function is commonly used for casting:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CAST(expression AS target_datatype)\n")),(0,r.yg)("p",null,"Alternatively, use the shorthand ",(0,r.yg)("inlineCode",{parentName:"p"},"::")," operator:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"expression::target_datatype\n")),(0,r.yg)("h2",{id:"key-points"},"Key Points"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Casting aligns with ",(0,r.yg)("inlineCode",{parentName:"li"},"TO_datatype")," conversion functions."),(0,r.yg)("li",{parentName:"ul"},"An error is raised if the cast is not possible due to data type incompatibility."),(0,r.yg)("li",{parentName:"ul"},"Examples:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Convert string to integer: ",(0,r.yg)("inlineCode",{parentName:"li"},"CAST('123' AS INT)")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"'123'::INT"),"."),(0,r.yg)("li",{parentName:"ul"},"Convert date to string: ",(0,r.yg)("inlineCode",{parentName:"li"},"CAST(NOW() AS VARCHAR)")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"NOW()::VARCHAR"),".")))),(0,r.yg)("h2",{id:"extracting-year-from-a-date-string-in-sql"},"Extracting Year from a Date String in SQL"),(0,r.yg)("p",null,"In SQL, you can convert a date string to a timestamp and then extract the year part from it. This is particularly useful when you have date information as a string and need to extract specific components like the year."),(0,r.yg)("h3",{id:"function-explanation"},"Function Explanation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"to_timestamp(\"DATE\", 'MM-dd-yyyy')"),": Converts a date string in the 'MM-dd-yyyy' format to a timestamp. For example, '12-25-2020' would be converted to a timestamp representing 25th December 2020."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"year(...)"),": Extracts the year part from the timestamp.")),(0,r.yg)("h3",{id:"sql-query-example"},"SQL Query Example"),(0,r.yg)("p",null,"Consider a table named ",(0,r.yg)("inlineCode",{parentName:"p"},"example_table")," with a column ",(0,r.yg)("inlineCode",{parentName:"p"},"DATE")," containing date strings in the 'MM-dd-yyyy' format. To select these dates and extract the year from each one, use the following SQL query:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT \n    DATE, \n    year(to_timestamp(DATE, 'MM-dd-yyyy')) AS Year \nFROM \n    example_table;\n")),(0,r.yg)("h3",{id:"expected-output"},"Expected Output"),(0,r.yg)("p",null,"Given the following sample data in ",(0,r.yg)("inlineCode",{parentName:"p"},"example_table"),":"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"DATE"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"12-25-2020")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"07-04-2019")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"01-01-2018")))),(0,r.yg)("p",null,"The query would return:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"DATE"),(0,r.yg)("th",{parentName:"tr",align:null},"Year"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"12-25-2020"),(0,r.yg)("td",{parentName:"tr",align:null},"2020")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"07-04-2019"),(0,r.yg)("td",{parentName:"tr",align:null},"2019")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"01-01-2018"),(0,r.yg)("td",{parentName:"tr",align:null},"2018")))),(0,r.yg)("p",null,"This method allows you to efficiently extract the year from a date string formatted as 'MM-dd-yyyy' in SQL."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Note:")," "),(0,r.yg)("ul",{parentName:"blockquote"},(0,r.yg)("li",{parentName:"ul"},"Familiarize with your SQL database's supported data types."),(0,r.yg)("li",{parentName:"ul"},"Validate data before casting to prevent errors."),(0,r.yg)("li",{parentName:"ul"},"Be aware of potential data truncation or rounding in some conversions."))),(0,r.yg)("p",null,"If you want to change granularity levels on your data and also summarize it, go ",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/SQL_window_function"},"here")," and ",(0,r.yg)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/sql/relational-databases/window-functions/quickstart-window-functions-by-example?view=sql-server-ver15"},"here")," to start your learning path."),(0,r.yg)("p",null,"Many core concepts can be learned from websites like ",(0,r.yg)("a",{parentName:"p",href:"https://www.w3schools.com/sql/default.asp"},"W3C"),". If you want to challenge yourself with practical exercises, you can take a look ",(0,r.yg)("a",{parentName:"p",href:"https://pgexercises.com/"},"here")," too."))}m.isMDXComponent=!0},3240:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/sql-joins-257fdb1eae13bf18ba0e44baeae38b2b.png"},3072:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/sql-meme-b7d664a9f05fa2b055d1799ed7dda758.jpeg"},9635:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/sql-844601eeac3b68b76bf8300e280fa0d5.gif"}}]);