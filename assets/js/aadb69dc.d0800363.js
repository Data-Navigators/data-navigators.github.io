"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[192],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,y=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(8168),r=(n(6540),n(5680));const o={sidebar_position:4},i="Exercise 1",l={unversionedId:"data-transformation/SQL/Exercise-1",id:"data-transformation/SQL/Exercise-1",title:"Exercise 1",description:"Create Table for Country Emissions",source:"@site/docs/data-transformation/SQL/Exercise-1.mdx",sourceDirName:"data-transformation/SQL",slug:"/data-transformation/SQL/Exercise-1",permalink:"/docs/data-transformation/SQL/Exercise-1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-transformation/SQL/Exercise-1.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Flattening Json format data \ud83e\ude84",permalink:"/docs/data-transformation/SQL/Flattening-Json-format-data"},next:{title:"Exercise 2",permalink:"/docs/data-transformation/SQL/Exercise-2"}},s={},u=[{value:"Create Table for Country Emissions",id:"create-table-for-country-emissions",level:2},{value:"Your output table should contain:",id:"your-output-table-should-contain",level:2},{value:"Sample Output",id:"sample-output",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"exercise-1"},"Exercise 1"),(0,r.yg)("h2",{id:"create-table-for-country-emissions"},"Create Table for Country Emissions"),(0,r.yg)("p",null,"To create a table called ",(0,r.yg)("inlineCode",{parentName:"p"},"co2_emissions_by_country")," in the ",(0,r.yg)("inlineCode",{parentName:"p"},"carbon_emissions")," schema, you will use the data from the ",(0,r.yg)("inlineCode",{parentName:"p"},"STG_EMISSIONS_BY_COUNTRY")," view to analyze and populate the table."),(0,r.yg)("p",null,"And TotalEmission column is same as ",(0,r.yg)("inlineCode",{parentName:"p"},"Annual_CO2_emissions")," column from ",(0,r.yg)("inlineCode",{parentName:"p"},"STG_EMISSIONS_BY_COUNTRY")," view"),(0,r.yg)("h2",{id:"your-output-table-should-contain"},"Your output table should contain:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"YEAR: integer"),(0,r.yg)("li",{parentName:"ul"},"COUNTRY: string"),(0,r.yg)("li",{parentName:"ul"},"TOTALEMISSIONS: float"),(0,r.yg)("li",{parentName:"ul"},"PERCAPITAEMISSIONS: float"),(0,r.yg)("li",{parentName:"ul"},"SHAREOFGLOBALEMISSIONS: float")),(0,r.yg)("h2",{id:"sample-output"},"Sample Output"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"YEAR"),(0,r.yg)("th",{parentName:"tr",align:null},"COUNTRY"),(0,r.yg)("th",{parentName:"tr",align:null},"TOTALEMISSIONS"),(0,r.yg)("th",{parentName:"tr",align:null},"PERCAPITAEMISSIONS"),(0,r.yg)("th",{parentName:"tr",align:null},"SHAREOFGLOBALEMISSIONS"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1978"),(0,r.yg)("td",{parentName:"tr",align:null},"Suriname"),(0,r.yg)("td",{parentName:"tr",align:null},"2.391861"),(0,r.yg)("td",{parentName:"tr",align:null},"6.681176"),(0,r.yg)("td",{parentName:"tr",align:null},"0.012616")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1979"),(0,r.yg)("td",{parentName:"tr",align:null},"Suriname"),(0,r.yg)("td",{parentName:"tr",align:null},"2.292768"),(0,r.yg)("td",{parentName:"tr",align:null},"6.38654"),(0,r.yg)("td",{parentName:"tr",align:null},"0.011779")))),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"To handle null values and convert a column to an integer using ",(0,r.yg)("inlineCode",{parentName:"p"},"COALESCE")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"NULLIF")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"CAST"),", use the following expression:"),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CAST(COALESCE(column_name, 0) AS INTEGER) AS new_column\n")),(0,r.yg)("p",{parentName:"admonition"},"This will replace null values in the ",(0,r.yg)("inlineCode",{parentName:"p"},"column_name")," with 0 before casting it to an integer. Adjust the column name and replacement value as needed in your specific case.")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"In the SQL statement, the use of double quotes around the YEAR column name is necessary because it is a reserved keyword in Snowflake. "),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},'select "YEAR" FROM TABLE'))))}c.isMDXComponent=!0}}]);