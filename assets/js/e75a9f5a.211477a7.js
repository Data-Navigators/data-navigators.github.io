"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[2502],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>y});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(r),m=a,y=c["".concat(s,".").concat(m)]||c[m]||g[m]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8880:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=r(8168),a=(r(6540),r(5680));const o={sidebar_position:11},i="Exercise 5",l={unversionedId:"data-processing/SQL/Exercise-5",id:"data-processing/SQL/Exercise-5",title:"Exercise 5",description:"Create Table for Aggregate Country Temperatures",source:"@site/docs/data-processing/SQL/Exercise-5.mdx",sourceDirName:"data-processing/SQL",slug:"/data-processing/SQL/Exercise-5",permalink:"/docs/data-processing/SQL/Exercise-5",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-processing/SQL/Exercise-5.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Exercise 4",permalink:"/docs/data-processing/SQL/Exercise-4"},next:{title:"Exercise: 6",permalink:"/docs/data-processing/SQL/Exercise-6"}},s={},u=[{value:"Create Table for Aggregate Country Temperatures",id:"create-table-for-aggregate-country-temperatures",level:2},{value:"Solution \ud83d\ude80",id:"solution-",level:2}],p={toc:u},c="wrapper";function g(e){let{components:t,...r}=e;return(0,a.yg)(c,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"exercise-5"},"Exercise 5"),(0,a.yg)("h2",{id:"create-table-for-aggregate-country-temperatures"},"Create Table for Aggregate Country Temperatures"),(0,a.yg)("p",null,"The objective of this exercise is to aggregate temperature measurements per country on an annual basis using the data from the ",(0,a.yg)("inlineCode",{parentName:"p"},"stg_temperatures_by_country"),' source.\nAdditionally, you will need to clean up the "Country" column by removing leading/trailing spaces and converting the country names to the proper format.'),(0,a.yg)("p",null,"To create a table called ",(0,a.yg)("inlineCode",{parentName:"p"},"aggregate_country_temperatures")," with the desired columns in the ",(0,a.yg)("inlineCode",{parentName:"p"},"global_temperatures")," schema:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Investigate the data in the ",(0,a.yg)("inlineCode",{parentName:"li"},"stg_temperatures_by_country")," source for any data quality issues."),(0,a.yg)("li",{parentName:"ol"},'Clean up the "Country" column, removing leading/trailing spaces and converting the country names to the proper format using the ',(0,a.yg)("inlineCode",{parentName:"li"},"initcap")," function."),(0,a.yg)("li",{parentName:"ol"},"Remove any occurrences of the Lenny face '( \u0361\xb0 \u035c\u0296 \u0361\xb0)' from the AverageTemperature column."),(0,a.yg)("li",{parentName:"ol"},"Remove specified regex pattern ",(0,a.yg)("inlineCode",{parentName:"li"},"'[-#?()\\\\s]+'")," within the REGEXP_REPLACE function.\nIt will remove any occurrences of hyphens, pound signs, question marks, parentheses, or whitespace from the AVERAGE_TEMPERATURE column before aggregating the values."),(0,a.yg)("li",{parentName:"ol"},"Aggregate the temperature measurements per country on an annual basis using the AVG function to calculate the average temperature."),(0,a.yg)("li",{parentName:"ol"},"Select the following columns for the output table:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"YEAR: Integer"),(0,a.yg)("li",{parentName:"ul"},"COUNTRY: String"),(0,a.yg)("li",{parentName:"ul"},"AVERAGETEMPERATURE: Float")))),(0,a.yg)("p",null,"Sample Output"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"YEAR"),(0,a.yg)("th",{parentName:"tr",align:null},"AVERAGETEMPERATURE"),(0,a.yg)("th",{parentName:"tr",align:null},"COUNTRY"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"1832"),(0,a.yg)("td",{parentName:"tr",align:null},"19.470083333"),(0,a.yg)("td",{parentName:"tr",align:null},"Greenland")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"1835"),(0,a.yg)("td",{parentName:"tr",align:null},"19.837833333"),(0,a.yg)("td",{parentName:"tr",align:null},"Greenland")))),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"In the SQL statement, the use of double quotes around the YEAR column name is necessary because it is a reserved keyword in Snowflake. "),(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("inlineCode",{parentName:"p"},'select "YEAR" FROM TABLE'))),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"solution-"},"Solution \ud83d\ude80"),(0,a.yg)("p",null,"For a deep dive into the solution, hop over to the ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("a",{parentName:"strong",href:"https://github.com/Data-Navigators/Data_Processing/tree/main/SQL"},"Data Navigators GitHub Repository")),". It's loaded with all the SQL scripts and data processing insights you\u2019ll need!"))}g.isMDXComponent=!0}}]);